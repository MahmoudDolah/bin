#!/bin/sh
#
# Source:
#   https://github.com/GaugeK/blaze
#
# I actually use variable "word splitting" to my advantage
#   shellcheck disable=SC2086 disable=SC2046
#
# I know && isn't if
#   shellcheck disable=SC2015
#

trap 'pkill -2 -P $(cat /tmp/blaze-pid)' 15 2

print() { printf "%b\n" "$@"; }

deps() {
	[ "$1" ] || {
		md="$(for i in $deps; do print " - \033[31m$i\033[0m"; done)"

		print "\033[31mYou are missing dependencies\033[0m"
		print "$md"
		print
	}
	print "\033[34mRequired dependencies\033[0m"
	print " - \033[34mffmpeg\033[0m         Actually recording"
	print " - \033[34mrofi\033[0m           Selecting the options"
	print " - \033[34mpkill\033[0m          Ending the recordings"
	print
	print "\033[35mAt least one of these is required\033[0m"
	print " - \033[35mmmutils\033[0m        Selecting a display to record"
	print " - \033[35mslop\033[0m           Selecting an area to record"
	print
	print "\033[32mOptional dependencies\033[0m"
	print " - \033[32mnotify-send\033[0m    Letting the user know when the recording starts/ends"
	print
	exit 1
}

_() { command -v "$1" >/dev/null 2>&1 || deps="$deps $1"; }

_ rofi
_ pkill
_ ffmpeg
command -v mattr slop >/dev/null 2>&1 || deps="$deps mmutils/slop"

[ "$deps" ] && deps


m() {
	rofi -dmenu -i "$@"
}

# exit if X isn't running
[ ! "$DISPLAY" ] &&
	print "Can't open display; exiting" && exit

# output file, use $BLAZE_DIR and $BLAZE_FILE if they are set
output="${BLAZE_DIR:-$PWD}/${BLAZE_FILE:-blaze-$(date '+%Y-%m-%d_%H-%M-%S').mp4}"

# find default audio device
audio() {
	pacmd="$(pacmd list-sources | grep -i -B 1 output)"
	dev="$(echo "$pacmd" | grep -i '\* index' ||
		echo "$pacmd" | grep -i 'index' | head -n 1)"
	audio="-f -i $(echo "$dev" | grep -o '[0-9]')"
}

help() {
	print "\033[34mOptions\033[0m"
	print "  \033[34m-s / --save\033[0m        End the recording"
	print "  \033[34m-h / --help\033[0m        Display what you're reading right now"
	print "  \033[34m-d / --deps\033[0m        Print dependencies"
	print "  \033[34m-c / --confirm\033[0m     Don't ask if the user is ready to record"
	print "  \033[34m-p / --preset\033[0m   \033[35m[]\033[0m Save to and load from preset <x>"
	print "  \033[34m-r / --rate\033[0m     \033[35m[]\033[0m Force framerate"
	print "  \033[34m-b / --bitrate\033[0m  \033[35m[]\033[0m Force bitrate  (in MB)"
	print "  \033[34m-m / --method\033[0m   \033[35m[]\033[0m Force method   (slop, display)"
	print "  \033[34m-D / --display\033[0m  \033[35m[]\033[0m Force display  (Doesn't require -m)"
	print "  \033[34m-n / --nvenc\033[0m       Force disable NVENC"
	print "  \033[34m-S / --slop\033[0m        Options to use for slop (Needs to be quoted)"
	print "  \033[34m-a / --audio\033[0m       Record desktop audio"
	print
	print "To select an area, install 'slop',"
	print "to select a display, install 'pockata/mmutils'"
	print
	print "\033[35m[]\033[0m = Option requires a value"
	print
	print "Final argument not starting with \`-\` will be output file"
	print
	print "\033[34mVariables\033[0m"
	print "  \033[34mBLAZE_DIR\033[0m    Location to save the video"
	print "    \033[37mDefault:     Current directory\033[0m"
	print
	print "  \033[34mBLAZE_FILE\033[0m   Name of the saved video"
	print "    \033[37mDefault:     'blaze-\$(date '+%Y-%m-%d_%H-%M-%S').mp4'\033[0m"
	print
	print "  \033[34mBLAZE_SLOP\033[0m   Options to use for slop"
	print "    \033[37mDefault:     None\033[0m"
}

while [ "$1" ]; do
	case "$1" in
		-h|--help)    help                 ; exit   ;;
		-d|--deps)    deps -a              ; exit   ;;
		-s|--save)    pkill blaze          ; exit   ;;
		-c|--confirm) ready="yes"                   ;;
		-p|--preset)  preset="$2"          ; shift  ;;
		-b|--bitrate) bitrate="-b:v ${2}M" ; shift  ;;
		-m|--method)  method="$2"          ; shift  ;;
		-r|--rate)    rate="$2"            ; shift  ;;
		-n|--nvenc)   nvenc="  "                    ;;
		-D|--display) display="$2"
		              method="display"     ; shift  ;;
		-S|--slop)    sloptions="$2"       ; shift  ;;
		-a|--audio)   audio;;
		--)           shift
		              [ "$1" ] && output="$1"
		              break                         ;;
		-*)           echo "Invalid option '$1'"
		              exit                          ;;
		*)            output="$1"          ; break  ;;
	esac
	shift
done

[ "$BLAZE_DIR" ] &&
	mkdir -p "$BLAZE_DIR" 2>/dev/null

[ -f /tmp/blaze-pid ] && echo "Blaze is already running, exiting." && exit


if [ "$preset" ]; then
	# make the directory blaze presets are stored
	mkdir -p "${XDG_CONFIG_HOME:-~/.config}/blaze" >/dev/null 2>&1

	# the location of the current preset
	preset_location="${XDG_CONFIG_HOME:-~/.config}/blaze/blaze-preset-$preset"

	[ -f "$preset_location" ] &&
		. "$preset_location"
fi



# ask the user what method they want to use
if [ ! "$method" ]; then
	# Check if the user has slop and mmutils
	command -v slop  >/dev/null 2>&1 && s=s
	command -v mattr >/dev/null 2>&1 && d=d

	# if the user only has slop or mmutils (But not both) use that
	[ "$s" ] && method=selection
	[ "$d" ] && method=display

	# if the user has both slop and mmutils ask the user which one to use
	[ "$s" ] && [ "$d" ] &&
		method="$(print "display\nselection" | m -p "Method of recording")"

fi

if [ "$method" = display ]; then

	# get information about the screen
	lsm="$(lsm)"

	# if there's only one display, use that and skip asking
	if [ $(print "$lsm" | wc -l) = 1 ]; then
		display="$lsm"
	else  # if there are other displays ask the user which one to use
		[ ! "$display" ] && display="$(print "$lsm" | m -p "Display to record")"
	fi

	# get information about the display
	width="$(mattr  w "$display")"
	height="$(mattr h "$display")"
	offX="$(mattr x "$display")"
	offY="$(mattr y "$display")"

elif [ "$method" = selection ] || [ "$method" = slop ]; then

	# select an area and make each number a separate word
	set -- $(slop $sloptions -f '%w %h %x %y')

	# get information about the display
	width="$1"
	height="$2"
	offX="$3"
	offY="$4"

	[ "$(( width % 2 ))" = 1 ] && width="$(( width + 1 ))"
	[ "$(( height % 2 ))" = 1 ] && height="$(( height + 1 ))"

else

	print "Invalid method; exiting"
	exit 1

fi

# ask the user what they want the framerate of the video to be
[ ! "$rate" ] && rate="$(print "30\n60" | m -p "Framerate")"


if [ "$preset" ] && [ "$method" = display ]; then

	print "rate=\"$rate\"
display=\"$display\"
[ ! \"\$bitrate\" ] &&
	bitrate=\"$bitrate\"
method=\"$method\"" > "$preset_location"

fi

# detect if the user has a nvidia card and use nvenc
[ ! "$nvenc" ] && lspci | grep -qi nvidia && \
	nvenc="-vcodec h264_nvenc"


# ask the user if they want to start the recording
[ ! "$ready" ] && ready="$(print "yes\nno" | m -p "Start the recording")"

if [ "$ready" = yes ]; then
	notify-send -t 1500 "Recording Started"

	#
	# -loglevel error   | makes ffmpeg only print errors to the terminal
	# -y                | don't ask to start
	# -draw_mouse 1     | show the mouse in the video
	# -s                | specifies the size of the recording
	# -r "$rate"        | specifies the framerate of the video
	# -i                | the input X display (not physical monitor) and offset
	# -pix_fmt yuv420p  | allows the video to be played on browsers like firefox
	# -q:v              | changes the quality of the video, lower is better.
	# "$output"         | file to save the recording to
	#

	echo $$ > /tmp/blaze-pid

	ffmpeg                         \
	  -loglevel error              \
	  -y                           \
	  $audio                       \
	  -f x11grab                   \
	  -draw_mouse 1                \
	  -s "${width}x$height"        \
	  -r "$rate"                   \
	  -i "$DISPLAY.0+$offX,$offY"  \
	  $bitrate                     \
	  -pix_fmt yuv420p             \
	  $nvenc                       \
	  -q:v 0                       \
	  "$output"

	notify-send -t 2000 "Recording Stopped"
	rm /tmp/blaze-pid
fi
